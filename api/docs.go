// Package api Code generated by swaggo/swag. DO NOT EDIT
package api

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/auth/login": {
            "post": {
                "description": "User login, creating new session",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "parameters": [
                    {
                        "example": "clicker123",
                        "description": "Profile username",
                        "name": "username",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "example": "helloWorld",
                        "description": "Profile password",
                        "name": "password",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responseJSON"
                        },
                        "headers": {
                            "sess_key": {
                                "type": "string",
                                "description": "Auth cookie with new valid session id(base64)"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errorResponseJSON"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errorResponseJSON"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errorResponseJSON"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/logout": {
            "delete": {
                "description": "User logout, session deletion",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "example": "k5qmqj507SejnpwJd%2FeO2Q%3D%3D",
                        "description": "Cookie with session key",
                        "name": "sess_key",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responseJSON"
                        },
                        "headers": {
                            "Session-id": {
                                "type": "string",
                                "description": "Auth cookie with expired session id"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errorResponseJSON"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errorResponseJSON"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errorResponseJSON"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/signup": {
            "post": {
                "description": "Creating new profile - user registration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "parameters": [
                    {
                        "example": "clicker123",
                        "description": "profile username",
                        "name": "username",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "example": "verysafePass",
                        "description": "profile password",
                        "name": "password",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "example": "admToken",
                        "description": "token for activating specific role(admin token in example)",
                        "name": "role_token",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responseJSON"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errorResponseJSON"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errorResponseJSON"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/update": {
            "put": {
                "description": "Update profile credentials",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "parameters": [
                    {
                        "example": "clicker123",
                        "description": "New profile username",
                        "name": "new_username",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "example": "helloWorld",
                        "description": "Old profile password for user verification",
                        "name": "old_password",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "example": "helloWorldNew",
                        "description": "New preferable password",
                        "name": "new_password",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "example": "helloWorldNew",
                        "description": "New preferable password repeated",
                        "name": "new_password_repeated",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "example": "moderatorToken",
                        "description": "New role token for optional role change",
                        "name": "new_role_token",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responseJSON"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errorResponseJSON"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errorResponseJSON"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errorResponseJSON"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "errorResponseJSON": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "no_auth"
                },
                "message": {
                    "type": "string",
                    "example": "Error description"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "responseJSON": {
            "type": "object",
            "properties": {
                "body": {},
                "message": {
                    "type": "string",
                    "example": "authorized successfully"
                },
                "status": {
                    "type": "string",
                    "example": "ok"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "FilmLib API",
	Description:      "API for films and actors library",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
